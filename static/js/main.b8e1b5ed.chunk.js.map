{"version":3,"sources":["img/coffee.jpg","img/coffeeMobile.jpg","img/beans.jpg","img/steaming-coffee-beans.jpg","img/roasted.jpg","img/package.jpg","components/useModal.js","components/modal.js","components/intro.js","components/heading.js","components/coffee.js","components/body.js","api/api.js","Card/cards.js","components/process.js","footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useModal","useState","isShowing","setIsShowing","toggle","console","log","Modal","hide","ReactDOM","createPortal","Fragment","className","aria-modal","aria-hidden","tabIndex","role","type","data-dismiss","aria-label","onClick","Form","FormGroup","Label","for","Input","name","id","Button","color","document","body","Intro","props","Container","Row","Col","md","title","description","propType","PropTypes","string","useWindowWidth","window","innerWidth","windowWidth","setWindowWidth","handleWindowResize","useEffect","addEventListener","removeEventListener","Heading","imageUrl","desktopImg","mobileImg","style","backgroundImage","Coffee","propTypes","String","Body","src","beans","alt","api","pic","require","desc","useStyles","makeStyles","card","maxWidth","media","height","Cards","classes","Card","CardActionArea","CardMedia","image","imge","CardContent","Typography","gutterBottom","variant","component","Process","Api","map","Footer","App","Boolean","location","hostname","match","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b8e1b5ed.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/coffee.2b3eb1e4.jpg\";","module.exports = __webpack_public_path__ + \"static/media/coffeeMobile.b0244dc2.jpg\";","module.exports = __webpack_public_path__ + \"static/media/beans.218c7bbf.jpg\";","module.exports = __webpack_public_path__ + \"static/media/steaming-coffee-beans.cd9af594.jpg\";","module.exports = __webpack_public_path__ + \"static/media/roasted.46c67a45.jpg\";","module.exports = __webpack_public_path__ + \"static/media/package.1d89748c.jpg\";","import{ useState } from 'react';\n\nconst useModal = () => {\n  const [isShowing, setIsShowing] = useState(false);\n\n  function toggle() {\n    setIsShowing(!isShowing);\n    console.log(\"test\")\n\n  }\n  return {\n    isShowing,\n    toggle,\n  }\n};\n\nexport default useModal;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '../css/modal.css'\nimport { Button, Form, FormGroup, Label, Input } from 'reactstrap';\n\nconst Modal = ({ isShowing, hide }) => isShowing ? ReactDOM.createPortal(\n  <React.Fragment>\n    <div className=\"modal-overlay\"/>\n    <div className=\"modal-wrapper\" aria-modal aria-hidden tabIndex={1} role=\"dialog\">\n        <div className = \"modal-text\">\n         <div className=\"modal-header\">\n          <button type=\"button\" className=\"modal-close-button\" data-dismiss=\"modal\" aria-label=\"Close\" onClick={hide}>\n            <span aria-hidden=\"true\">&times;</span>\n          </button>\n        </div>\n        <Form>\n      <FormGroup>\n        <Label for=\"exampleEmail\">First Name</Label>\n        <Input type=\"Name\" name=\"email\" id=\"exampleEmail\" />\n      </FormGroup>\n      <FormGroup>\n        <Label for=\"examplePassword\">Last Name</Label>\n        <Input type=\"Name\" name=\"password\" id=\"examplePassword\"  />\n      </FormGroup>\n      <FormGroup>\n        <Label for=\"examplePassword\">Email</Label>\n        <Input type=\"Email\" name=\"password\" id=\"examplePassword\" />\n      </FormGroup>\n      <Button color=\"success\" onClick = {hide}>Submit</Button>{' '}\n      </Form>\n\n        </div>\n      </div>\n\n  </React.Fragment>, document.body\n) : null;\n\nexport default Modal;","import React from \"react\";\nimport { PropTypes } from \"prop-types\";\nimport { Container, Row, Col } from \"reactstrap\";\nimport { Button } from 'reactstrap';\nimport useModal from './useModal';\nimport '../css/heading.css'\nimport Modal from \"./modal\";\n\n\nconst Intro = props => {\n  const {toggle, isShowing} = useModal();\n  return(\n    <div>\n  <Container>\n    <Row>\n      <Col md=\"6\"></Col>\n      <Col md=\"6\">\n        <div className = \"coffee\">\n          <h1 className = \"justCoffee\">{props.title}</h1>\n          <h3 className = \"life\">{props.description}</h3>\n          <Button color=\"primary\" onClick = {toggle}>Get a quote</Button>{' '}\n          </div>\n      </Col>\n    </Row>\n  </Container> \n  <Modal\n        isShowing={isShowing}\n        hide={toggle}\n      />\n  </div>\n  )\n};\n\nIntro.propType = {\n  title: PropTypes.string,\n  description: PropTypes.string\n};\n\nexport default Intro;\n","import React, {useEffect, useState} from \"react\";\nimport Intro from \"./intro\";\nimport '../App.css'\nimport desktopImg from '../img/coffee.jpg'\nimport mobileImg from '../img/coffeeMobile.jpg'\n\nconst Heading = props => {\n\n  const imageUrl = useWindowWidth() >= 768 ? desktopImg : mobileImg;\n\n  return (\n    <div style={{backgroundImage: `url(${imageUrl})` }} className=\"background\">\n      <Intro\n      title=\"It's not just coffee\" \n      description=\"Its a way of life!\" />\n       </div>\n  );\n};\n\n\nconst useWindowWidth = () => {\n  const [windowWidth, setWindowWidth ] = useState(window.innerWidth);\n\n  const handleWindowResize = () => {\n      setWindowWidth(window.innerWidth);\n  };\n\n  useEffect(() => {\n      window.addEventListener('resize', handleWindowResize);\n      return () => window.removeEventListener('resize', handleWindowResize);\n  },[]);\n\n  return windowWidth;\n};\n    \n export default Heading\n\n    ","import React from 'react'\nimport propTypes from 'prop-types'\nimport '../css/body.css'\n\nconst Coffee = props => (\n    <div>\n    <h1 className = \"title\">{props.title}</h1>\n    <p className = \"body\">{props.body}</p>\n    </div>\n)\n\nCoffee.propType = {\n    title: propTypes.String,\n    body: propTypes.String\n}\n\nexport default Coffee\n\n\n","import React from 'react'\nimport beans from '../img/beans.jpg'\nimport Coffee from './coffee'\nimport { Container, Row, Col } from \"reactstrap\";\nimport '../css/body.css'\n\nconst Body = props => (\n    <Container>\n    <Row>\n    <Col md=\"6\">\n    <Coffee \n    title = \"Imported coffee worldwide\"\n    body = \"The ideal conditions for coffee trees to thrive are found around the world in along the Equatorial zone called “The Bean Belt,” located between latitudes 25 \n    degrees North and 30 degrees South.\" />\n    </Col>\n    <Col md=\"6\">\n    <img className = \"coffee-beans\" src = {beans} alt = \"coffee beans\"></img>\n    </Col>\n  </Row>\n</Container>\n)\nexport default Body","const api = [\n  {\n    pic: require(\"../img/steaming-coffee-beans.jpg\"),\n    name: \"Decaffeinating\",\n    desc:\n      \"If the coffee is to be decaffeinated, It is now processed using either a solvent or a water method. In the first process, the coffee beans are treated with a solvent (usually methylene chloride) that leaches out the caffeine\"\n\n\n  },\n  {\n    pic: require(\"../img/roasted.jpg\"),\n    name: \"Roasting\",\n    desc:\n      \"the beans are roasted in huge commercial roasters according to procedures and specifications which vary among manufacturers (specialty shops usually purchase beans directly from the growers and roast them on-site\"\n  },\n  {\n    pic: require(\"../img/package.jpg\"),\n    name: \"Packaging\",\n    desc:\"Because it is less vulnerable to flavor and aroma loss than other types of coffee, whole bean coffee is usually packaged in foil-lined bags. If it is to retain its aromatic qualities, pre-ground coffee must be hermetically sealed\"\n  }\n];\n\nexport default api;\n\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst useStyles = makeStyles({\n  card: {\n    maxWidth: 355\n  },\n  media: {\n    height: 250\n  }\n});\n\nconst Cards = props => {\n  const classes = useStyles();\n\n  return (\n    <Card className={classes.card}>\n      <CardActionArea>\n        <CardMedia\n          className={classes.media}\n          image={props.imge}\n          title=\"Contemplative Reptile\"\n        />\n        <CardContent>\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\n            {props.name}\n          </Typography>\n          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n            {props.desc}\n          </Typography>\n        </CardContent>\n      </CardActionArea>\n    </Card>\n  );\n};\n\nexport default Cards;\n","import React from \"react\";\nimport Api from \"../api/api\";\nimport Card from \"../Card/cards\";\nimport { Container, Row, Col } from 'reactstrap';\nimport '../css/process.css'\nconst Process = props => (\n<div  className = \"contain\">\n  <Container>\n  <Row >\n    {Api.map(({ pic, name, desc }) => (\n      <>\n      <Col md={4} className = \"innerCard\">\n        <Card imge={pic} name={name} desc={desc} />\n        </Col>\n      </>\n    ))}\n    </Row>\n    </Container>\n    </div>\n);\n\nexport default Process;\n","import React from 'react'\nimport './css/footer.css'\nimport '../node_modules/font-awesome/css/font-awesome.min.css'\n\nconst Footer = props => (\n\n <div className = \"footer\">\n  <h1 className = \"contact\">Contact us</h1>\n  <i className=\"fa fa-facebook-square\"></i>\n<i className=\"fa fa-twitter-square\"></i>\n<i className=\"fa fa-linkedin-square\"></i>\n </div>\n)\nexport default Footer","import React from 'react';\nimport './App.css';\nimport Heading from './components/heading'\nimport Body from './components/body'\nimport Process from './components/process'\nimport Footer from './footer'\n\n\nfunction App() {\n\n  return (\n    <div>\n      <Heading/>\n      <Body/>\n      <Process/>\n      <Footer/>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}